##|TYPE Template
##|UNIQUEID f3075bb8-ec17-4ca8-93f6-965bbd4e9653
##|TITLE SQL Stored Procedures Report
##|NAMESPACE SQL
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN
<%#REFERENCE System.Windows.Forms.dll %>
<%#NAMESPACE System, System.Text, System.Collections, Zeus, Zeus.UserInterface, Zeus.DotNetScript %>

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	public override void Setup()
	{
		ui.Title = "Stored Procedures Documentation";
		ui.Width = 340;
		ui.Height = 480;
		
		// Grab default output path
		string sOutputPath = "";
		if (input.Contains("defaultOutputPath")) 
		{
			sOutputPath = input["defaultOutputPath"].ToString();
		}
		
		// Display and errors here
		GuiLabel lblError = ui.AddLabel("lblError", "", "");
		lblError.ForeColor = "Red";
		
		// Setup Folder selection input control.
		GuiLabel lblPath = ui.AddLabel("lblPath", "Select the output path:", "Select the output path in the field below.");
		GuiTextBox outpath = ui.AddTextBox("txtPath", sOutputPath, "Select the Output Path.");
		GuiFilePicker btnSelectPath = ui.AddFilePicker("btnPath", "Select Path", "Select the Output Path.", "txtPath", true);
		
		// Setup Database selection combobox.
		GuiLabel label_d = ui.AddLabel("lblDatabases", "Select a database:", "Select a database in the dropdown below.");
		GuiComboBox cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.");
		
		// Setup SPROC selection multi-select listbox.
		GuiLabel label_t = ui.AddLabel("lblStoredProcedures", "Select Stored Procedures:", "Select stored procedures from the listbox below.");
		GuiListBox lstStoredProcedures = ui.AddListBox("lstStoredProcedures", "Select Stored Procedures");
		lstStoredProcedures.Height = 160;
		
		// Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown(cmbDatabases, lblError);
		cmbDatabases.AttachEvent("onchange", "cmbDatabases_onchange");
		
		ui.ShowGui = true;
	}
	
	public void setupDatabaseDropdown(GuiComboBox cmbDatabases, GuiLabel lblError)
	{
		try 
		{	
			if (MyMeta.IsConnected) 
			{
				cmbDatabases.BindData(MyMeta.Databases);
				if (MyMeta.DefaultDatabase != null) 
				{
					cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name;
					bindStoredProcedures(cmbDatabases.SelectedValue);
				}
	
				lblError.Text = "";
			}
			else
			{
				lblError.Text = "Please set up your database connection in the Default Settings dialog.";
			}
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void bindStoredProcedures(string sDatabase)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiListBox lstStoredProcedures = ui["lstStoredProcedures"] as GuiListBox;
		
		try 
		{	
			IDatabase db = MyMeta.Databases[sDatabase];
			lstStoredProcedures.BindData(db.Procedures);
	
			lblError.Text = "";
		}
		catch (Exception ex)
		{
			lblError.Text = ex.Message;
		}
	}
	
	public void cmbDatabases_onchange(GuiComboBox control)
	{
		GuiLabel lblError = ui["lblError"] as GuiLabel;
		int count = 0;
	
		GuiComboBox cmbDatabases = ui["cmbDatabase"] as GuiComboBox;
	
		bindStoredProcedures(cmbDatabases.SelectedValue);
	}
	
	public class MyStoredProcs
	{
		
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#NAMESPACE System.IO, System, System.Text, System.Collections, Zeus, Zeus.DotNetScript %><%
/*
	Author: Julien Jacobs
	Created on : July 28, 2004
	
	Generates a HTML report of the Stored Procedures of a database
	
	TODO:
		Do not list system stored procedures
*/
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	public override void Render()
	{
		string databaseName = input["cmbDatabase"].ToString();
		ArrayList storedProcedures = input["lstStoredProcedures"] as ArrayList;
		
		IDatabase database = MyMeta.Databases[databaseName];
		
		// Filename info
		string filepath = input["txtPath"].ToString();
		if (!filepath.EndsWith("\\") ) filepath += "\\";
		
		int c = 100;
		
		foreach (string storedProcName in storedProcedures)
		{
		
			string file = filepath + c.ToString("0000") + ".Create_Stored_Procedure_" + storedProcName + ".sql";
		
			IProcedure  storedProc = database.Procedures[storedProcName];
		
	
	
			output.writeln("IF EXISTS (SELECT * FROM sysobjects WHERE type = 'P' AND name = '" + storedProcName + "')");
			output.writeln("BEGIN");
			output.writeln("	DROP  Procedure  " + storedProcName);
			output.writeln("END");
			output.writeln("GO");		
		
			output.writeln(storedProc.ProcedureText);
			output.writeln("GO");
			output.save(file, false);
			output.clear();
			c++;
		}
		
		
		
		
		
		
		// Build the filename
		string filename = filepath + "db_stored_procedures_report_" + databaseName + ".html";
		
		output.setPreserveSource(filename, "<!--::", "::-->");
%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> 
<HTML> 
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
<HEAD> 
<TITLE><%= databaseName %> Stored Procedures</TITLE> 
<% output.preserve("customHeaders"); %>
<STYLE><!-- 
body, td, th
{
	font-family:arial;
	font-size:9pt;
}

p
{
	margin-top:8px;
	margin-bottom:8px;

}

p.authorinfo
{
	color:darkblue;
	font-size:10pt;
	font-style:italic;
}

h1, h2, h3, h4
{
	color:blue;
}

table 
{
	border: black 1px solid;
}

th 
{
	color: dark blue;
	background-color: #9999ff;
	font-weight: bold;
}

td
{
	color: dark blue;
	background-color: #ccccff;
}

h1
{
	font-size:20pt;
	margin-bottom:4px;
}

h2
{
	font-size:16pt;
	font-style:italic;
	margin-bottom:2px;
}

h3
{
	font-size:12pt;
	font-style:italic;
	margin-bottom:1px;
}

h4
{
	font-size:10pt;
	margin-bottom:1px;
}
--></STYLE> 
</HEAD>
<BODY>
<h1><%= databaseName %> Stored Procedures</h1>
<%= DateTime.Now.ToShortDateString() %>
<a name="#TOC"></a>
<h3>Table Of Contents</h3>
<ul>
	<ol><%
		foreach (string storedProcName in storedProcedures)
		{
%>
			<li><a href="#<%= storedProcName %>"><%= storedProcName %></a></li>
<%
		}
%>
	</ol>
</ul>


<%
		foreach (string storedProcName in storedProcedures)
		{
			IProcedure  storedProc = database.Procedures[storedProcName];
%>
<HR width="100%" height=1 color=blue>
<a name="<%= storedProc.Name %>"></a>
<a href="#TOC">Table of Contents</a>
<H3>Stored Procedure: <%=storedProc.Name %></H3>

<H4>Parameters</H4> 
<table>
	<tr>
		<th nowrap>Name</th>
		<th nowrap>Data Type</th>
		<th nowrap>Direction</th>
	</tr>
<%
			foreach (IParameter parameter in storedProc.Parameters)
			{
%>
	<tr>
		<td nowrap valign=top><%= parameter.Name %></td>
		<td nowrap valign=top><%= parameter.DataTypeNameComplete.ToString() %></td>
		<td nowrap valign=top><%= parameter.Direction.ToString() %></td>
	</tr>
<%
			}
%>
</table>

<%
			if(storedProc.ResultColumns.Count > 0)
			{
%>

<H4>Result Columns</H4> 
<table>
	<tr>
		<th nowrap>Name</th>
		<th nowrap>Alias</th>
		<th nowrap>Data Type</th>
	</tr>
<%
				foreach (IResultColumn column in storedProc.ResultColumns)
				{
%>
	<tr>
		<td nowrap valign=top><%= column.Name %></td>
		<td nowrap valign=top><%= column.Alias %></td>
		<td nowrap valign=top><%= column.DataTypeNameComplete.ToString() %></td>
	</tr>
<%
				}
%>
</table>
<%
			}
%>


<%
		}
%>

</BODY>
</HTML>
<%
		output.save(filename, false);
	}
}
%>
##|BODY_END
